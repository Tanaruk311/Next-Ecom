generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  price         Float
  description   String
  createdAt     DateTime    @default(now())
  image         String
  imagePublicId String?
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  productId String
  quantity  Int
  userId    String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  totalPrice Float
  createdAt  DateTime    @default(now())
  addressId  String?
  status     String      @default("กำลังดำเนินการ")
  address    Address?    @relation("AddressToOrder", fields: [addressId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  addresses     Address[]
  orders        Order[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  fullName    String
  phone       String
  address     String
  district    String
  province    String
  zip         String
  createdAt   DateTime @default(now())
  subdistrict String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]  @relation("AddressToOrder")
}
