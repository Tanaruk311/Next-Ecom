generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  price         Float
  image         String
  description   String
  createdAt     DateTime    @default(now())
  imagePublicId String?
  cartItems       CartItem[]
  orderItems    OrderItem[] // ✅ เชื่อมกับ OrderItem
}

model CartItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  userId    String
}



model Order {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  totalPrice Float
  createdAt  DateTime @default(now())
  addressId  String?
  address    Address?  @relation("AddressToOrder", fields: [addressId], references: [id])
  status String @default("กำลังดำเนินการ")


  items OrderItem[] // ✅ ความสัมพันธ์กับรายการสินค้า
}




model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float // ราคาตอนสั่งซื้อ
}

model User {
  id       String  @id @default(cuid())
  password String?

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user")
  addresses     Address[]
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  fullName  String
  phone     String
  address   String
  district  String
  subdistrict String
  province  String
  zip       String
  createdAt DateTime @default(now())
  orders    Order[]  @relation("AddressToOrder")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
